@inject IJSRuntime js
@inject IProductService _productService

@if (loading)
{
    <Loading></Loading>
    return;
}

@if (ShowNewProduct)
{
    <div class="modal-backdrop show"></div>

    <div class="modal" role="dialog" aria-hidden="true" style="display:block;">
        <div class="modal-dialog modal-lg" role="document" style="z-index: 8000000;">
            <div class="modal-content" style="border-radius: 10px;">
                <div class="modal-header" style="background-color: #ffc107; border-radius: 10px;">
                    <h5 class="modal-title">Novo Produto</h5>
                    <button type="button" class="btn-close" @onclick=@(() => Back()) data-mdb-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="justify-content-center">
                        <div class="gap-3" style="display: flex; ">
                            <div class="mb-2" style="position: relative;">
                                <img src="@Methods.ConvertImgBytesToDisplay(product.Image)"
                                     alt="Generic placeholder image" class="img-fluid img-thumbnail mb-2"
                                     style="width: 150px; z-index: 1">
                                @if (!isReadOnly)
                                {
                                    <BlazorInputFile.InputFile class="form-control form-control-sm" style="width: 122px; bottom: 12px; right: 64%; margin-left: 9%;" OnChange="HandleSelection" />
                                }
                            </div>
                            <div>
                                <div class="form-group row" style="flex-wrap: initial;">
                                    <label style="padding-top: 1%; font-size: 22px; width: 14%;">Nome</label>
                                    <div>
                                        <input class="form-control" style="width: 492px;" type="text" @bind="product.Name" placeholder="Nome Completo" disabled="@isReadOnly">
                                    </div>
                                </div>
                                <div class="form-group row" style="flex-wrap: initial; padding-top: 2%;">
                                    <label style="padding-top: 1%; font-size: 22px; width: 14%;">Preço</label>
                                    <div class="input-group" style="width: 33%;">
                                        <span class="input-group-text">R$</span
                                        <input class="form-control" type="text" id="preco" @bind="product.Price" placeholder="Preço" disabled="@isReadOnly">
                                    </div>
                                </div>
                                <div class="form-group gap-4" style="padding-top: 2%; display: flex;">
                                    <label style="font-size: 22px;">Descrição</label>
                                    <textarea class="form-control font-italic" placeholder="Descrição" @bind="product.Description" rows="4" disabled="@isReadOnly">

                                    </textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (isReadOnly) {
                    <div class="modal-footer gap-2 d-flex justify-content-center">
                        <button class="btn btn-warning" style="border-radius: 10px" @onclick=@(() => Back()) data-dismiss="modal">Fechar</button>
                    </div>
                } else {
                    <div style="display: flex; justify-content: center;">
                        <div class="modal-footer gap-2 d-flex justify-content-center">
                            <button class="btn btn-warning" style="border-radius: 10px" @onclick=@(() => Save()) data-dismiss="modal">Salvar</button>
                        </div>
                        <div class="modal-footer gap-2 d-flex justify-content-center">
                            <button class="btn btn-danger" style="border-radius: 10px" @onclick=@(() => Delete()) data-dismiss="modal">Excluir</button>
                        </div>
                        @*função de deletar está com bug (identificado pouco tempo antes da entrega, por isso não foi corrigido) *@
                    </div>
                }
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    bool isReadOnly { get; set; }
    bool isEditing { get; set; }
    bool ShowNewProduct { get; set; }
    bool loading { get; set; }
    Product product;

    public async Task New(Company company) {
        product = new Product();
        product.CompanyID = company.ID;
        ShowNewProduct = true;
        StateHasChanged();
    }

    public async Task Show(Product product, bool isEditing = false) {
        this.product = product;
        isReadOnly = !isEditing;
        this.isEditing = isEditing;
        ShowNewProduct = true;
        StateHasChanged();
    }

    async Task HandleSelection(IFileListEntry[] files) {
        var file = files.FirstOrDefault();
        if (file != null) {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            product.Image = ms.ToArray();
        }
    }

    async Task Back() {
        ShowNewProduct = false;
        StateHasChanged();
    }

    async Task Save() {
        loading = true;
        StateHasChanged();
        APIResult result;
        if (isEditing)
            result = await _productService.Update(product);
        else
            result = await _productService.Save(product);
        if (result.Result) {
            ShowNewProduct = false;
            loading = false;
            StateHasChanged();
            await OnClose.InvokeAsync();
        }
    }

    async Task Delete()
    {
        loading = true;
        StateHasChanged();
        APIResult result = await _productService.Delete(product.ID);
        if (result.Result)
        {
            ShowNewProduct = false;
            loading = false;
            StateHasChanged();
            await OnClose.InvokeAsync();
        }
    }
}